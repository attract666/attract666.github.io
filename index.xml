<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JiaHe&#39;s Blog</title>
    <link>https://attract666.github.io/</link>
    <description>Recent content on JiaHe&#39;s Blog</description>
    <generator>Hugo -- 0.134.0</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 02 Dec 2024 11:27:27 +0800</lastBuildDate>
    <atom:link href="https://attract666.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零开始学LLaVA 03</title>
      <link>https://attract666.github.io/posts/llava_03/</link>
      <pubDate>Mon, 02 Dec 2024 11:27:27 +0800</pubDate>
      <guid>https://attract666.github.io/posts/llava_03/</guid>
      <description>&lt;p&gt;本文将详细介绍与LLaVA v1.5训练相关的代码。LLaVA训练包括两个阶段，分别是特征对齐和视觉指令微调。特征对齐启动的脚本在&lt;code&gt;LLaVA/scripts/v1_5/pretrain.sh&lt;/code&gt;，视觉指令微调启动的脚本在&lt;code&gt;LLaVA/scripts/v1_5/finetune.sh&lt;/code&gt;。两个脚本文件执行的都是&lt;code&gt;LLaVA/llava/train/train_mem.py&lt;/code&gt;，在&lt;code&gt;LLaVA/llava/train&lt;/code&gt;目录下还有一个&lt;code&gt;train.py&lt;/code&gt;，这个才是真正的总体路口，不同点在于是否使用&lt;code&gt;flash_attention_2&lt;/code&gt;。阅读的建议是先找到总体思路，在对照各个部分的代码段分块理解。&lt;/p&gt;
&lt;h1 id=&#34;数据部分&#34;&gt;数据部分&lt;/h1&gt;</description>
    </item>
    <item>
      <title>从零开始学LLaVA 02</title>
      <link>https://attract666.github.io/posts/llava_02/</link>
      <pubDate>Fri, 01 Nov 2024 18:21:23 +0800</pubDate>
      <guid>https://attract666.github.io/posts/llava_02/</guid>
      <description>&lt;h1 id=&#34;llava-15悟道&#34;&gt;LLaVA-1.5悟道&lt;/h1&gt;
&lt;p&gt;LLaVA-1.5在LLaVA的基础上做了一小部分修改。模型上把之前的线性层换成了MLP，visual encoder从ViT-L-14换成了ViT-L-14-336px，数据集进行了扩充（Visual Instruction Tuning从158K涨到了665K）&lt;/p&gt;
&lt;h2 id=&#34;论文贡献&#34;&gt;论文贡献&lt;/h2&gt;
&lt;p&gt;论文主要贡献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证了LLaVA架构的高效性：使用最少的计算量和数据达到了更优的性能&lt;/li&gt;
&lt;li&gt;简单修改了LLaVA的架构&lt;/li&gt;
&lt;li&gt;在prompt中明确回复格式以平衡模型的长短回复&lt;/li&gt;
&lt;li&gt;分析了分辨率、数据规模和LLM大小对性能的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络架构&#34;&gt;网络架构&lt;/h2&gt;
&lt;p&gt;整体架构上没有太大的改变，如下图所示：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_02/LLaVA-1.5.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;LLaVA v1.5.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2310.03744&#34;&gt;LLaVA v1.5&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;很重要的一点，是作者使用了AnyRes策略，来拓展视觉的分辨率（因为CLIP支持的最大分辨率是336px）&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_02/AnyRes.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;LLaVA v1.5 HD.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2310.03744&#34;&gt;LLaVA v1.5&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;AnyRes策略的具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将高分辨率图像切分成块，每块的大小取决于visual encoder能处理的分辨率大小。visual encoder单独处理每一块&lt;/li&gt;
&lt;li&gt;将高分辨图像resize成visual encoder可以处理的大小进行编码&lt;/li&gt;
&lt;li&gt;将上面两步的结果拼接起来一起作为视觉特征&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在LLM中，模型的幻觉归因于训练数据集中的错误或幻觉。作者认为输入分辨率不足以让模型识别数据中的所有细节，模型就会产生幻觉。&lt;/p&gt;
&lt;h2 id=&#34;数据集规模&#34;&gt;数据集规模&lt;/h2&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_02/Instruction data.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;Instruction-following Data.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2310.03744&#34;&gt;LLaVA v1.5&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;hr&gt;
&lt;h1 id=&#34;llava-next&#34;&gt;LLaVA-NEXT&lt;/h1&gt;
&lt;p&gt;与LLaVA-1.5相比，主要有以下提升：&lt;/p&gt;</description>
    </item>
    <item>
      <title>从零开始学LLaVA 01</title>
      <link>https://attract666.github.io/posts/llava_01/</link>
      <pubDate>Wed, 23 Oct 2024 19:09:20 +0800</pubDate>
      <guid>https://attract666.github.io/posts/llava_01/</guid>
      <description>&lt;h1 id=&#34;从llava-10论文开始&#34;&gt;从LLaVA-1.0论文开始&lt;/h1&gt;
&lt;p&gt;LLaVA: Visual Instruction Tuning(NeurIPS 2023 Oral)&lt;/p&gt;
&lt;p&gt;Paper link: &lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;&lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;https://arxiv.org/abs/2304.08485&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;&lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;https://github.com/haotian-liu/LLaVA&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;论文亮点&#34;&gt;论文亮点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多模态 instruction-following 数据：使用GPT4-text-only将图像-文本对转换成适当的instruction-following格式，主要有对话（Conversation）、细节描述（Detailed description）和复杂推理（Complex reasoning）三类&lt;/li&gt;
&lt;li&gt;多模态大模型：使用CLIP-L/14作为视觉编码器，大模型使用Vicuna（llama-13B），以及使用全连接层作为投影层，将视觉tokens映射到LLM的word embedding space&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络架构&#34;&gt;网络架构&lt;/h2&gt;
&lt;p&gt;结构上vision encoder使用的是CLIP-L/14（&lt;strong&gt;使用倒数第二层得到的特征，实验证明效果会更好，作者分析认为是因为最后一层聚焦图像的全局信息，倒数第二层更关注局部特征&lt;/strong&gt;）进行编码，之后使用一个投影层（&lt;strong&gt;全连接层&lt;/strong&gt;）对齐到word embedding，输入的文本经过embedding模型得到word embedding，两个embedding拼接后一起输入给llama。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_01/LLaVA.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;LLaVA Architecture.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;LLaVA&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;h2 id=&#34;数据集构成及数据收集细节&#34;&gt;数据集构成及数据收集细节&lt;/h2&gt;
&lt;p&gt;训练分为两个阶段，第一个阶段只更新投影层，使用的是一个简单视觉问答的数据集（CC3M中过滤出595K）；第二个阶段训练llama和投影层，数据集使用的是COCO数据集（158K）和ScienceQA微调出了两个版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预训练数据集（CC3M过滤）&lt;/strong&gt;：使用Spacy（NLP库）为CC3M上的每个caption提取名词短语，并计算每个唯一名词短语的频率。忽略掉频率小于3的名词短语，对于频率大于100的名词短语随机选择一个数量为100的子集。最终产生595K个图像-文本对。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_01/cc3m_filtered.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;CC3M Filtered.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;LLaVA&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;将图像文本对采用简单的指令构造，用下图所示的问题提示GPT-4，生成对应的答案。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/LLaVA_01/cc3m_prompt.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;CC3M image description.(Image source:&lt;a href=&#34;https://arxiv.org/abs/2304.08485&#34;&gt;LLaVA&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;指令格式如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diffusion Models</title>
      <link>https://attract666.github.io/posts/ddpm/</link>
      <pubDate>Mon, 09 Sep 2024 15:58:57 +0800</pubDate>
      <guid>https://attract666.github.io/posts/ddpm/</guid>
      <description>&lt;h1 id=&#34;什么是generative-model&#34;&gt;什么是Generative Model?&lt;/h1&gt;
&lt;p&gt;我们可以看到的现实中的各种图片，视为已经观察到的数据，那么理论上必然存在一个分布$p(x)$可以描述它们。如果我们想要生成一张图片，很自然的想法就是从这个分布$p(x)$中采样一个点。也就是说，如果我们可以通过某种方法学习到对真实数据映射的数据分布$p(x)$，那么我们就可以通过这个分布生成新的样本。但是现实生活中，这个分布$p(x)$是复杂的，我们很难真的完全建模出来，因此有时我们也使用学习到的模型来评估观察到的货采样数据的可能性。&lt;/p&gt;
&lt;p&gt;在现有的Generative Model有以下几个大方向。GAN对复杂分布的采样过程进行建模，并以对抗方式学习。likelihood-based旨在学习为观察到的数据样本分配高可能性的模型，这包括自回归模型和VAE。energy-based将分布学习为任意灵活的能量函数，然后将其归一化。&lt;/p&gt;
&lt;h2 id=&#34;ae--vae&#34;&gt;AE &amp;amp; VAE&lt;/h2&gt;
&lt;p&gt;我们所观察到的数据可以被视为一些更高层次的表示的函数所生成的，我们可以近似的描述我们观察到的数据的潜在表示，用随机变量$z$表示，也称之为潜变量（latent variable）。在生成建模中，我们通常寻求学习较低维度的潜在表示。这是因为如果没有强大的先验知识，试图学习比观察更高维的表示是徒劳的。另一方面，学习低维潜变量也可以被视为一种压缩形式，并且可以潜在揭示描述观察结果的语义上有意义的结构。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://attract666.github.io/img/DDPM/AE.png&#34; width=&#34;70%&#34; title=&#34;&#34;&gt;&lt;/center&gt;
&lt;center&gt;Autoencoder.(Image source:&lt;a href=&#34;https://lilianweng.github.io/posts/2018-08-12-vae/&#34;&gt;Lilian Weng&lt;/a&gt;)&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;这就是&lt;strong&gt;Autoencoder(AE)&lt;/strong&gt;的想法，&lt;strong&gt;AE&lt;/strong&gt;包含编码器$g(.)$和解码器$f(.)$，输入$x$的低维压缩表示是$z = g_{\phi}(x)$，重构后的输出是$x&amp;rsquo; = f_{\theta}(g_{\phi}(x))$。参数$(\theta, \phi)$的学习目标是输入与输出尽可能相似，即$x \approx x&amp;rsquo;$，这个损失函数我们也称之为重构损失。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variational Autoencoder（VAE）&lt;/strong&gt;的思想实际上与&lt;strong&gt;AE&lt;/strong&gt;不太相似。在&lt;strong&gt;VAE&lt;/strong&gt;中，我们不想将输入映射到固定向量中，而是将其映射到分布中。我们将此分布记为$p_{\theta}$，参数为$\theta$，于是我们可以有如下定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先验概率$p_{\theta}(z)$&lt;/li&gt;
&lt;li&gt;似然性（likelihood）$p_{\theta}(x | z)$&lt;/li&gt;
&lt;li&gt;后验概率$p_{\theta}(z | x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设我们知道这个分布的真实参数$\theta^{*}$，为了使得我们的生成模型生成看起来更像真实数据的样本$x^{(i)}$，我们可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先从已知的分布$p_{\theta^{*}}(z)$中采样$z^{(i)}$&lt;/li&gt;
&lt;li&gt;然后从条件分布$p_{\theta^{*}}(x | z = z^{(i)})$中采样一个$x^{(i)}$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么这个分布我们似乎就可以写出来了:&lt;/p&gt;
&lt;p&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo data-mjx-texclass=&#34;OP&#34;&gt;∫&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;|&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;θ&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;/math&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于</title>
      <link>https://attract666.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://attract666.github.io/about/</guid>
      <description>about</description>
    </item>
  </channel>
</rss>
